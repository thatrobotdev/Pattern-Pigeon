{
  "name": "af66a430-a6b3-4f00-b579-0cdd0a80eca2",
  "displayName": "Composite",
  "transitionRoutes": [ {
    "intent": "Go home",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "I hear ya! Enough Composite for now. Back to the coop!", "Okay, let's learn about something else." ]
        },
        "languageCode": "en"
      }, {
        "text": {
          "text": [ "What to dive into next, Composite, Observer, or Strategy?" ]
        },
        "languageCode": "en"
      } ],
      "advancedSettings": {
        "playbackInterruptionSettings": {
        
        },
        "dtmfSettings": {
          "useSystemEntityRule": false
        }
      }
    },
    "targetFlow": "Default Start Flow",
    "name": "5d694014-6612-473a-b14c-c46a3b711db0"
  }, {
    "intent": "What is the composite pattern?",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Coo coo! The Composite pattern is a structural design pattern used to represent tree-like hierarchies of objects. It allows individual objects (leaves) and groups of objects (composites) to be treated uniformly through a shared interface.\n\nIn this pattern, there is a Component interface that both individual elements and composite groups implement. A Composite class contains child components—both leaves and other composites—and delegates all world to them." ]
        },
        "languageCode": "en"
      } ],
      "advancedSettings": {
        "playbackInterruptionSettings": {
        
        },
        "dtmfSettings": {
          "useSystemEntityRule": false
        }
      }
    },
    "name": "663a5646-6655-4e17-a279-ccfa0e581fd9"
  }, {
    "intent": "What are examples of the Composite pattern?",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Coo, coo, let's get to it!" ]
        },
        "languageCode": "en"
      }, {
        "text": {
          "text": [ "Imagine an image editor that defines a `Graphic` interface. The smallest drawable element could be a `Dot`, which implements this interface. More complex shapes like `Circle` or `CompoundGraphic` (which may group multiple `Graphic` objects) also implement the same interface. This way, the editor can handle single elements and groups of elements in the same way, such as drawing, moving, or deleting them.", "The SEC is a great real-world example of the Composite pattern. The conference as a whole can be thought of as a composite object that contains multiple components. These components can be either teams (composite) or players (leaves).\n\nEach player represents a leaf node, an individual unit that does not contain other components. A team represents a composite node containing multiple players and can perform operations like listing player stats, or calculating team rankings. The entire conference could be a composite that contains all teams. Operations like “print all team rosters” or “compute average team performance” can be delegated down through the structure.\n\nBecause both teams and players adhere to a common interface (such as `displayStats()` or `getRanking()`), clients can treat them uniformly. Whether the component is a single player or an entire team, the operation is invoked the same way." ]
        },
        "languageCode": "en"
      } ],
      "advancedSettings": {
        "playbackInterruptionSettings": {
        
        },
        "dtmfSettings": {
          "useSystemEntityRule": false
        }
      }
    },
    "name": "2ee98aae-408a-4334-9c17-f424500ea163",
    "description": "What are examples of the Composite pattern?"
  }, {
    "intent": "Why use the Composite pattern?",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Coo coo, let's break it down!" ]
        },
        "languageCode": "en"
      }, {
        "text": {
          "text": [ "The Composite pattern is useful when you need to work with tree-like structures where individual objects and groups of objects should be treated the same way. The uniformity of the components and compositions make things simple for clients. It also makes it really easy to scale the tree structure by adding new leaves without changing existing code. It also decouples the client from differentiating between dealing with a single object or a composite, making things simpler!" ]
        },
        "languageCode": "en"
      } ],
      "advancedSettings": {
        "playbackInterruptionSettings": {
        
        },
        "dtmfSettings": {
          "useSystemEntityRule": false
        }
      }
    },
    "name": "e3d2feee-98e3-4740-8505-a72fa38e6db9",
    "description": "Why use the Composite pattern?"
  }, {
    "intent": "What disadvantages are there with the Composite pattern?",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Coo, coo! Draw-backs time!" ]
        },
        "languageCode": "en"
      }, {
        "text": {
          "text": [ "While the Composite pattern is powerful, there are some disadvantages. It can be complex to design, as a component that works for both simple and composite elements can be challenging to make. It's also hard to restrict behavior because all components share the same interface." ]
        },
        "languageCode": "en"
      } ],
      "advancedSettings": {
        "playbackInterruptionSettings": {
        
        },
        "dtmfSettings": {
          "useSystemEntityRule": false
        }
      }
    },
    "name": "bc06387a-4c43-4ec3-a3f3-8d5198b85f7a",
    "description": "What disadvantages are there with the Composite pattern?"
  } ],
  "eventHandlers": [ {
    "event": "sys.no-match-default",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Huh? Say that again, coo?", "Whaaat? I missed that, try flappin' it my way once more.", "Ey, sorry buddy, didn't catch that–mind sayin' it again?", "Squack! Can ya repeat that for me?", "One more peep? Didn't quite get it!", "Whoa whoa whoa–run that by me again?", "Coo? What'd you just say?", "Say it again, pal–I was peckin' at somethin' shiny.", "Wings down, I didn't hear ya–one more time?", "Can ya chirp that again? I zoned out mid-coo.", "Uh-oh, missed that one—gimme a repeat?", "Mind tossin’ those words my way again, chief?" ]
        },
        "languageCode": "en"
      } ]
    },
    "name": "71813030-b7e3-42b1-b7b1-be0010d969c1"
  }, {
    "event": "sys.no-input-default",
    "triggerFulfillment": {
      "messages": [ {
        "text": {
          "text": [ "Huh? Say that again, coo?", "Whaaat? I missed that, try flappin' it my way once more.", "Ey, sorry buddy, didn't catch that–mind sayin' it again?", "Squack! Can ya repeat that for me?", "One more peep? Didn't quite get it!", "Whoa whoa whoa–run that by me again?", "Coo? What'd you just say?", "Say it again, pal–I was peckin' at somethin' shiny.", "Wings down, I didn't hear ya–one more time?", "Can ya chirp that again? I zoned out mid-coo.", "Uh-oh, missed that one—gimme a repeat?", "Mind tossin’ those words my way again, chief?" ]
        },
        "languageCode": "en"
      } ]
    },
    "name": "b7fd9ce6-5069-4447-81d4-1d38808d87b2"
  } ],
  "nluSettings": {
    "modelType": "MODEL_TYPE_ADVANCED",
    "classificationThreshold": 0.30000001
  },
  "nluSettingsList": [ {
    "modelType": "MODEL_TYPE_ADVANCED",
    "classificationThreshold": 0.30000001,
    "languageCode": "en"
  } ]
}
